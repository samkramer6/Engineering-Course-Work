MSP432 Emulator - Version 1.1

All of the following p-code functions must either be on the Matlab path, or
in the same folder where Matlab is currently working from.

When the MSP432_emulator is running in Matlab, you will no longer be able to 
type commands into the Command window and you will not be able to run scripts.


MSP432_emulator.p
    This is the primary interface application to launch the MSP432 emulator
    and to run user programs, which are specially designed Matlab functions.

    MSP432_emulator(@userfunction)

    userfunction.m is the main function generated by the user

    Note:  If no userfunction is provided, then the MSP432_emulator will run
    in 'demo' mode with very limited capability.


MSP432_set_LED_state.p
    This function is used to enable (light up) the user-programmable LED's
    on the MSP432.  LED1 is a red LED, and LED2 is a red-green-blue LED.

    MSP432_set_LED_state(ledname,rgbcolor)

    ledname is a string that must either be 'LED1' or 'LED2'
    rgbcolor is a numeric input that defines the LED state
        and can accept two kinds of input
        1) a 1x3 vector:  rgbcolor = [red, green, blue], where
            red = 0 or 1, green = 0 or 1, and blue = 0 or 1
            where 0=off and 1=on
            For LED1, the green and blue values in the 1x3 vector are ignored
        2) an integer index value ranging from 0 to the maximum number of
            colors that can be generated
            For LED1, rgbcolor = 0 (red off), or 1 (red on)
            For LED2, rgbcolor ranges from 0 to 7: 
                0 => [0 0 0]    black
                1 => [1 0 0]    red
                2 => [0 1 0]    green
                3 => [0 0 1]    blue
                4 => [1 0 1]    magenta
                5 => [0 1 1]    cyan
                6 => [1 1 0]    yellow
                7 => [1 1 1]    white


MSP432_get_LED_state.p
    This function reads the current rgbcolor index for the specified LED.

    rgbcolor = MSP432_get_LED_state(ledname)

    ledname is a string that must either be 'LED1' or 'LED2'
    rgbcolor is a numeric value
        For LED1, rgbcolor ranges from 0 to 1
        For LED2, rgbcolor ranges from 0 to 7


MSP432_set_switch_state.p
    This function is used to set the state of either of two mechanical
    pushbutton switches on the MSP432 board.

    MSP432_set_switch_state(switchname,state)

    switchname is a string that must either be 'S1' or 'S2'
    state is either 0 (or false) for off, or 1 (or true) for on

    Note that the S1 and S2 switches on the MSP432_emulator figure can be
    manually set using a mouse click.  Note that on the actual MSP432 hardware
    these switches are momentary contact, but on the emulator they are
    latched, which means that when you click them, they will stay at that state.
    This function is typically only used to reset the switch back to an off state.


MSP432_get_switch_state.p
    This function reads the state of either of two mechanical
    pushbutton switches on the MSP432 board.

    state = MSP432_set_switch_state(switchname)

    switchname is a string that must either be 'S1' or 'S2'
    state is either 0 (or false) for off, or 1 (or true) for on


MSP432_test_for_reset.p
    This function reads the state of the reset switch on the MSP432 board.
    On the actual MSP432 hardware, pressing the reset button will restart the
    program loaded in memory.  On the emulator, pressing the reset button will
    restart the program provided by the user.

    state = MSP432_test_for_reset

    state is either 0 (or false) when reset has not been pressed, or
                    1 (or true) when reset has been pressed


MSP432_set_ADC_timer_clock.p
    This function defines the base frequency of the TIMERA clock, which is used to
    drive the ADC sample rate.  Normally, the max frequency is used for setting this
    clock.

    MSP432_set_ADC_timer_clock(timera_clk_hz)

    timera_clk_hz can only be set to:  32786 Hz, 16384 Hz, 8192 Hz, 4096 Hz, or 2048 Hz


MSP432_set_ADC_timer_period.p
    This function defines the number of counts after which the TIMERA counter will generate
    an ADC interrupt.  The TIMERA counter is a 16-bit counter.

    MSP432_set_ADC_timer_period(timera_period)

    timera_period must be an integer between 1 and 65535

    Note:  The ADC sample rate is defined to be:  fs = timera_clk_hz / timera_period


MSP432_get_ADC_value.p
    This function returns one or more raw samples from the ADC.  If the plant_emulator.p function
    is not found on the Matlab path, this function generates samples from a built-in signal generator.

    If you only want to read the raw ADC value from channel 1 use:
    adc_value = MSP432_get_ADC_value

    If you want to read the raw ADC value from a specific channel, e.g. channel N, use:
    adc_value = MSP432_get_ADC_value(N)

    If you want to read raw ADC values from multiple channels, e.g. channels 1, 2, and 3, use:
    adc_value = MSP432_get_ADC_value([1,2,3])

    The MSP432 supports up to 32 channels of ADC input. You can only choose channels from 1 to 32.
    If you choose multiple channels, they do not need to be in numerical order.
    If you choose a channel that is out of range or not connected to anything, the returned values
    will be zero.

    adc_value is the raw integer ADC sample ranging from 0 to 16383 (14-bit ADC)


MSP432_set_system_clock.p
    This function defines the frequency of the MSP432 system clock.  This is the rate at which
    instructions are processed by the CPU, and also defines the base frequency for the PWM drives.

    MSP432_set_system_clock(sys_clk_mhz)

    sys_clk_mhz can only be set to:  1.5 MHz, 3 MHz, 12 MHz, 24 MHz, or 48 MHz


MSP432_set_PWM_base_frequency.p
    This function defines the base frequency of the PWM signal.  This frequency must be larger than
    10000 Hz in order to allow the fixed analog anti-imaging filters to filter out the high-frequency
    component of the PWM signal.

    MSP432_set_PWM_base_frequency(pwm_base_hz)

    pwm_base_hz can be any integer frequency between 10000 Hz and (sys_clk_mhz*1e6/256)

    Note:  You can either specify the PWM base frequency or the PWM base period.  Specifying one will
            automatically define the other.  They are related by the following:
                pwm_base_hz = round((sys_clk_mhz*1e6) / max_pwm_count);


MSP432_set_PWM_base_period.p
    This function defines the base period of the PWM signal.  This period must be larger than
    256 in order to insure at least an 8-bit resolution on the control output.

    MSP432_set_PWM_base_period(max_pwm_count)

    max_pwm_count can be any integer between 256 and (sys_clk_mhz*1e6/10000)

    Note:  You can either specify the PWM base frequency or the PWM max count.  They are related by:
                max_pwm_count = round((sys_clk_mhz*1e6) / pwm_base_hz);


MSP432_get_PWM_base_period.p
    This function returns the current base period of the PWM signal.  

    max_pwm_count = MSP432_get_PWM_base_period

    max_pwm_count will be any integer between 256 and (sys_clk_mhz*1e6/10000)


MSP432_set_PWM_count.p
    This function defines the number of counts of the system clock where the PWM output will be high.

    MSP432_set_PWM_count(pwm_count)

    pwm_count can be any integer between 0 and max_pwm_count

    Note:  When pwm_count = max_pwm_count/2, the PWM output will have a 50% duty cycle. Since the
           maximum output voltage is 2.5V, the average value of a 50% duty cycle square wave is
           1.25V.  This midpoint voltage is assumed to be level shifted by circuitry to effectively
           make this correspond to 0 V applied to the plant.


MSP432_enable_interrupts.p
    This function enables the TIMERA interrupts to begin sampling the ADC and execute the ADC14_IRQHandler
    interrupt service routine.

    MSP432_enable_interrupts(enable)

    enable is either 0 (or false) to disable interrupts, or 1 (or true) to enable interrupts


MSP432_write_data_to_workspace.p
    This function emulates writing data through a serial port from the MSP432_emulator to
    the Matlab workspace.

    MSP432_write_data_to_workspace(variable_name_in_workspace,data_to_write)

    variable_name_in_workspace must be a string containing the name of the variable you want the
    data to show up as in the workspace

    data_to_write can be any valid Matlab matrix, vector, structure, array, etc. 


MSP432_shutdown.p
    This function forces a soft reset independent of the current state.
    Normally, the general user will never need to use this function, but it must
    be available to the MSP432_emulator application.


MSP432.rom
    This binary file contains low-level code that is required to implement
    the MSP432 emulator.



